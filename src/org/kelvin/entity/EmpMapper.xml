<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kelvin.dao.EmpDAO">

	<select id="findAll" resultType="org.kelvin.entity.Emp">
		select * from t_emp
	</select>
	
	<!-- if -->
	<!-- 查询部门下的所有员工 -->
	<select id="findByDept" parameterType="org.kelvin.entity.Condition" 
							resultType="org.kelvin.entity.Emp">
		select * from t_emp
		<if test="deptno != null">
			where deptno = #{deptno}
		</if>
	</select>
	
	<!-- choose -->
	<!-- 查询大于当前收的员工 -->
	<select id="findBySalary" parameterType="org.kelvin.entity.Condition"
							  resultType="org.kelvin.entity.Emp">
		select * from t_emp
		<choose>
			<when test="salary > 3000">
				where sal > #{salary}
			</when>
			<otherwise>
				where sal >= 3000
			</otherwise>
		</choose>
	</select>
	
	<!-- Where -->
	<!-- 查询当前部门下，大于当前收入的员工 -->
	<select id="findByDeptAndSalary" parameterType="org.kelvin.entity.Condition"
							  	     resultType="org.kelvin.entity.Emp">
		select * from t_emp
		<where>
			<if test="deptno != null">
				and deptno = #{deptno}
			</if>
			<if test="salary != null">
				and sal > #{salary}
			</if>
		</where>
	</select>
	
	<!-- set -->
	<!-- 更新员工 -->
	<update id="update" parameterType="org.kelvin.entity.Emp">
		update t_emp
		<set>
			<if test = "ename != null">
				ename = #{ename},
			</if>
			<if test = "job != null">
				job = #{job},
			</if>
		</set>
		where empno = #{empno}
	</update>
	
	<!-- 使用trim代替where -->
	<!-- 查询当前部门下，大于当前收入的员工 -->
	<select id="findByDeptAndSalary2" parameterType="org.kelvin.entity.Condition"
							  	      resultType="org.kelvin.entity.Emp">
		select * from t_emp
		<trim prefix="where" prefixOverrides="and">
			<if test="deptno != null">
				and deptno = #{deptno}
			</if>
			<if test="salary != null">
				and sal > #{salary}
			</if>
		</trim>
	</select>
	
	<!-- 使用trim代替set -->
	<update id="update2" parameterType="org.kelvin.entity.Emp">
		update t_emp
		<trim prefix="set" suffixOverrides=",">
			<if test = "ename != null">
				ename = #{ename},
			</if>
			<if test = "job != null">
				job = #{job},
			</if>
		</trim>
		where empno = #{empno}
	</update>
	
	<!-- foreach -->
	<!-- 根据ID查询员工 -->
	<select id="findByIds" parameterType="org.kelvin.entity.Condition"
						   resultType="org.kelvin.entity.Emp">
		select * from t_emp where empno in
		<foreach collection="empnos" open="(" close=")" separator="," item="id">
			#{id}
		</foreach>
	</select>
	
	<!-- 保存一条员工数据 -->
	<!-- 非自动递增，适用ORACLE -->
	<!--<insert id="save" parameterType="org.kelvin.entity.Emp">
		<selectKey keyProperty="empno" order="BEFORE" resultType="java.lang.Integer">
			select emp_seq.nextval from dual
		</selectKey>
		insert into t_emp values(#{empno},
								 #{ename,jdbcType=VARCHAR},
								 #{job,jdbcType=VARCHAR},
								 #{mgr,jdbcType=NUMERIC},
								 #{hiredate,jdbcType=DATE},
								 #{sal,jdbcType=NUMERIC},
								 #{comm,jdbcType=NUMERIC},
								 #{deptno,jdbcType=NUMERIC})
	</insert>-->
	<!-- 自动递增，适用MySQL -->
	<insert id="save" parameterType="org.kelvin.entity.Emp" keyProperty="empno" useGeneratedKeys="true">
		insert into t_emp(empno,
						  ename,
						  job,
						  mgr,
						  hiredate,
						  sal,
						  comm,
						  deptno) 
		values(#{empno},
			   #{ename,jdbcType=VARCHAR},
			   #{job,jdbcType=VARCHAR},
			   #{mgr,jdbcType=NUMERIC},
			   #{hiredate,jdbcType=DATE},
			   #{sal,jdbcType=NUMERIC},
			   #{comm,jdbcType=NUMERIC},
			   #{deptno,jdbcType=NUMERIC})
	</insert>
	
	<!-- 使用嵌套查询，在查询一条员工数据时，关联查询出对应的部门 -->
	<select id="findById" parameterType="java.lang.Integer" resultMap="empMap">
		select * from t_emp where empno = #{id}
	</select>
	<select id="findDept" parameterType="java.lang.Integer" resultType="org.kelvin.entity.Dept">
		select * from t_dept where deptno = #{deptno}
	</select>
	<resultMap type="org.kelvin.entity.Emp" id="empMap">
		<association property="dept" column="deptno" javaType="org.kelvin.entity.Dept" select="findDept">
		</association>
	</resultMap>
	
	<!-- 使用嵌套查询，在查询一条员工数据时，关联查询出对应的部门  -->
	<select id="findById2" parameterType="java.lang.Integer" resultMap="empMap2">
		select e.*, d.* from t_emp e inner join t_dept d on e.deptno = d.deptno where e.empno = #{id}
	</select>
	<resultMap type="org.kelvin.entity.Emp" id="empMap2">
		<id property="empno" column="empno" />
		<result property="ename" column="ename" />
		<result property="job" column="job" />
		<result property="mgr" column="mgr"/>
		<result property="hiredate" column="hiredate"/>
		<result property="sal" column="sal"/>
		<result property="comm" column="comm"/>
		<result property="deptno" column="deptno"/>
		
		<association property="dept" column="deptno" javaType="org.kelvin.entity.Dept">
			<id property="deptno" column="deptno"/>
			<result property="dname" column="dname"/>
			<result property="loc" column="loc"/>
		</association>
	</resultMap>

</mapper>